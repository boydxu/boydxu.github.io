<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>redux-源码解析(3)-bindActionCreators&amp;combineReducers</title>
      <link href="/2018/09/12/redux-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90(3)-bindActionCreators&amp;combineReducers/"/>
      <url>/2018/09/12/redux-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90(3)-bindActionCreators&amp;combineReducers/</url>
      <content type="html"><![CDATA[<p>bindActionCreators和combineReducers逻辑比较简单,不像之前的applyMiddleware那么难理解</p><h2 id="bindActionCreators"><a href="#bindActionCreators" class="headerlink" title="bindActionCreators"></a>bindActionCreators</h2><p><code>bindActionCreator</code>的主要功能是用<code>dispatch</code>将<code>action创建函数</code>包裹起来,返回的函数执行后会自动dispatch<code>action创建函数</code>生成的<code>action</code>.</p><p>看两个简单🌰</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = createStore(reducer)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createIncrementAction</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        type: <span class="string">'increment'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 通过bindActionCreators将createIncrementAction用dispatch包裹</span></span><br><span class="line"><span class="keyword">let</span> autoDispatchAction = bindActionCreators(createIncrementAction,store.dispatch)</span><br><span class="line"></span><br><span class="line">autoDispatchAction() <span class="comment">// 创建action后,执行了dispatch(&#123;type:'increment'&#125;)</span></span><br></pre></td></tr></table></figure><p>当actionCreators是对象的情况</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> actionCreators = &#123;</span><br><span class="line">    increment: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> &#123;<span class="attr">type</span>: <span class="string">'increment'</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    decrement: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> &#123;<span class="attr">type</span>: <span class="string">'decrement'</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> autoDispatchAction = bindActionCreators(actionCreators,store.dispatch)</span><br><span class="line"></span><br><span class="line">actionCreators.increment() <span class="comment">// 最终执行了dispatch(&#123;type:'increment'&#125;)</span></span><br><span class="line">actionCreators.decrement() <span class="comment">// 最终执行了dispatch(&#123;type:'decrement'&#125;)</span></span><br></pre></td></tr></table></figure><p>下面我们来看看源码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bindActionCreator</span>(<span class="params">actionCreator, dispatch</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 返回一个匿名函数, 执行该匿名函数,先执行原action创建函数,再执行dispatch</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dispatch(actionCreator.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 核心代码,就上面几行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// actionCreators,参数是action创建函数,也可以是属性都是'action创建函数'的对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">bindActionCreators</span>(<span class="params">actionCreators, dispatch</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 在actionCreators是action创建函数的情况下直接调用bindActionCreator</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> actionCreators === <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> bindActionCreator(actionCreators, dispatch)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 对actionCreators进行校验</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> actionCreators !== <span class="string">'object'</span> || actionCreators === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">      <span class="string">`bindActionCreators expected an object or a function, instead received <span class="subst">$&#123;</span></span></span><br><span class="line"><span class="string"><span class="subst">        actionCreators === <span class="literal">null</span> ? <span class="string">'null'</span> : <span class="keyword">typeof</span> actionCreators</span></span></span><br><span class="line"><span class="string"><span class="subst">      &#125;</span>. `</span> +</span><br><span class="line">        <span class="string">`Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?`</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 读取actionCreators所有属性名</span></span><br><span class="line">  <span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(actionCreators)</span><br><span class="line">  <span class="comment">// 定义结果变量</span></span><br><span class="line">  <span class="keyword">const</span> boundActionCreators = &#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 遍历actionCreators的所有属性值</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> key = keys[i]</span><br><span class="line">    <span class="keyword">const</span> actionCreator = actionCreators[key]</span><br><span class="line">    <span class="comment">// 如果该属性值是函数的话,给结果变量添加相同属性,赋值bindActionCreator函数的执行结果</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> actionCreator === <span class="string">'function'</span>) &#123;</span><br><span class="line">      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回结果变量</span></span><br><span class="line">  <span class="keyword">return</span> boundActionCreators</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="combineReducers"><a href="#combineReducers" class="headerlink" title="combineReducers"></a>combineReducers</h2><p>combineReducers的作用也很简单,对多个reducer进行了合并,源码虽然有100多行,但核心代码也只有60左右,原理也非常简单,老样子,先看个使用🌰</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> incrementReducer = <span class="function">(<span class="params">state = <span class="number">0</span>, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'increment'</span>:</span><br><span class="line">      <span class="keyword">return</span> state + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> decrementReducer = <span class="function">(<span class="params">state = <span class="number">0</span>, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'decrement'</span>:</span><br><span class="line">      <span class="keyword">return</span> state - <span class="number">1</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> reducers = combineReducers(&#123;</span><br><span class="line">  incrementReducer,</span><br><span class="line">  decrementReducer,</span><br><span class="line">  otherReducer: decrementReducer,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> store = createStore(reducers)</span><br><span class="line">store.getState()</span><br><span class="line"><span class="comment">// 得到下面state</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   incrementReducer: 0,</span></span><br><span class="line"><span class="comment">//   decrementReducer: 0,</span></span><br><span class="line"><span class="comment">//   otherReducer: 0</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">store.dispatch(&#123;</span><br><span class="line">  type: <span class="string">'increment'</span></span><br><span class="line">&#125;)</span><br><span class="line">store.getState()</span><br><span class="line"><span class="comment">// 得到下面state</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   incrementReducer: 0,</span></span><br><span class="line"><span class="comment">//   decrementReducer: -1,</span></span><br><span class="line"><span class="comment">//   otherReducer: -1</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><p>可以看到combineReducers的参数是一个对象,它的每个属性都是一个reducer.该对象分别有<code>incrementReducer</code>,<code>decrementReducer</code>,<code>otherReducer</code>三个属性,最终获取到的state有相同的属性. 每个reducer只能对各自同名的state属性进行值的修改.  在<code>dispatch(action)</code>之后,state有2个属性值发生了改变,因为每个<code>reducer</code>都被调用了,但只有下面2个reducer的switch命中了该type,所以只有同名的state属性值发生了改变.</p><p>下面看看源码,为了方便解读,我调整了函数顺序.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ActionTypes <span class="keyword">from</span> <span class="string">'./utils/actionTypes'</span></span><br><span class="line"><span class="keyword">import</span> warning <span class="keyword">from</span> <span class="string">'./utils/warning'</span></span><br><span class="line"><span class="keyword">import</span> isPlainObject <span class="keyword">from</span> <span class="string">'./utils/isPlainObject'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">combineReducers</span>(<span class="params">reducers</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 读取reducers所有属性</span></span><br><span class="line">  <span class="keyword">const</span> reducerKeys = <span class="built_in">Object</span>.keys(reducers)</span><br><span class="line">  <span class="keyword">const</span> finalReducers = &#123;&#125;</span><br><span class="line">  <span class="comment">// 遍历reducers所有属性,下面几行代码纯粹是为了净化掉非function值的属性</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; reducerKeys.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> key = reducerKeys[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> reducers[key] === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">        warning(<span class="string">`No reducer provided for key "<span class="subst">$&#123;key&#125;</span>"`</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 属性值为function,给finalReducers添加同名属性并赋值</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> reducers[key] === <span class="string">'function'</span>) &#123;</span><br><span class="line">      finalReducers[key] = reducers[key]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 读取过滤属性后的reducers(也就是finalReducers)的所有属性</span></span><br><span class="line">  <span class="keyword">const</span> finalReducerKeys = <span class="built_in">Object</span>.keys(finalReducers)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> unexpectedKeyCache</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">    unexpectedKeyCache = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 还是校验reducer,具体见assertReducerShape函数</span></span><br><span class="line">  <span class="keyword">let</span> shapeAssertionError</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    assertReducerShape(finalReducers)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    shapeAssertionError = e</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// combineReducers的执行结果是一个函数,这个函数就是新的reducers,它和普通的reducer一样,只接收state和action参数</span></span><br><span class="line">  <span class="comment">// 注意: 在使用组合reducers后,state的初始值是个空对象,state也可以在createStore时指定,但也必须是对象</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">combination</span>(<span class="params">state = &#123;&#125;, action</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在assertReducerShape不通过的情况执行下调用新的recuder时抛出错误</span></span><br><span class="line">    <span class="keyword">if</span> (shapeAssertionError) &#123;</span><br><span class="line">      <span class="keyword">throw</span> shapeAssertionError</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> warningMessage = getUnexpectedStateShapeWarningMessage(</span><br><span class="line">        state,</span><br><span class="line">        finalReducers,</span><br><span class="line">        action,</span><br><span class="line">        unexpectedKeyCache</span><br><span class="line">      )</span><br><span class="line">      <span class="keyword">if</span> (warningMessage) &#123;</span><br><span class="line">        warning(warningMessage)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// state是否改变的标识</span></span><br><span class="line">    <span class="keyword">let</span> hasChanged = <span class="literal">false</span></span><br><span class="line">    <span class="comment">// 新的state,所有的reducer执行后的结果都保存在里面</span></span><br><span class="line">    <span class="keyword">const</span> nextState = &#123;&#125;</span><br><span class="line">    <span class="comment">// 遍历reducers</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; finalReducerKeys.length; i++) &#123;</span><br><span class="line">      <span class="comment">// key为该reducer在reducers的属性名</span></span><br><span class="line">      <span class="keyword">const</span> key = finalReducerKeys[i]</span><br><span class="line">      <span class="keyword">const</span> reducer = finalReducers[key]</span><br><span class="line">      <span class="comment">// state同属性名的值</span></span><br><span class="line">      <span class="keyword">const</span> previousStateForKey = state[key]</span><br><span class="line">      <span class="comment">// 执行该reducer,得到新的状态</span></span><br><span class="line">      <span class="keyword">const</span> nextStateForKey = reducer(previousStateForKey, action)</span><br><span class="line">      <span class="comment">// 执行结果为unundefined,抛出错误</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> nextStateForKey === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">        <span class="comment">// getUndefinedStateErrorMessage对错误信息进行拼接</span></span><br><span class="line">        <span class="keyword">const</span> errorMessage = getUndefinedStateErrorMessage(key, action)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(errorMessage)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 把执行结果保存在nextState对应的属性</span></span><br><span class="line">      nextState[key] = nextStateForKey</span><br><span class="line">      <span class="comment">// 判断状态是否发生改变,更新标识</span></span><br><span class="line">      hasChanged = hasChanged || nextStateForKey !== previousStateForKey</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 执行完所有的reducer后,根据state是否改变的标识,返回对应结果.</span></span><br><span class="line">    <span class="keyword">return</span> hasChanged ? nextState : state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 以上为核心代码,下面代码可以忽略</span></span><br><span class="line"><span class="comment">// 以上为核心代码,下面代码可以忽略</span></span><br><span class="line"><span class="comment">// 以上为核心代码,下面代码可以忽略</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对所有的reducer的执行结果做一次检测</span></span><br><span class="line"><span class="comment">// 保证每个reducer执行的结果为非undefined.</span></span><br><span class="line"><span class="comment">// 注意!!执行结果可以为null</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">assertReducerShape</span>(<span class="params">reducers</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 遍历每个reducer</span></span><br><span class="line">  <span class="built_in">Object</span>.keys(reducers).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> reducer = reducers[key]</span><br><span class="line">    <span class="comment">// 模拟在creatStore中执行dispatch(&#123;type: ActionTypes.INIT&#125;),结果为undefined就抛错</span></span><br><span class="line">    <span class="keyword">const</span> initialState = reducer(<span class="literal">undefined</span>, &#123;</span><br><span class="line">      type: ActionTypes.INIT</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> initialState === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">`Reducer "<span class="subst">$&#123;key&#125;</span>" returned undefined during initialization. `</span> +</span><br><span class="line">        <span class="string">`If the state passed to the reducer is undefined, you must `</span> +</span><br><span class="line">        <span class="string">`explicitly return the initial state. The initial state may `</span> +</span><br><span class="line">        <span class="string">`not be undefined. If you don't want to set a value for this reducer, `</span> +</span><br><span class="line">        <span class="string">`you can use null instead of undefined.`</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 模拟在creatStore中执行dispatch,action.type为随机字符串,结果为undefined就抛错</span></span><br><span class="line">    <span class="keyword">const</span> type =</span><br><span class="line">      <span class="string">'@@redux/PROBE_UNKNOWN_ACTION_'</span> +</span><br><span class="line">      <span class="built_in">Math</span>.random()</span><br><span class="line">        .toString(<span class="number">36</span>)</span><br><span class="line">        .substring(<span class="number">7</span>)</span><br><span class="line">        .split(<span class="string">''</span>)</span><br><span class="line">        .join(<span class="string">'.'</span>)</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> reducer(<span class="literal">undefined</span>, &#123;</span><br><span class="line">      type</span><br><span class="line">    &#125;) === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">`Reducer "<span class="subst">$&#123;key&#125;</span>" returned undefined when probed with a random type. `</span> +</span><br><span class="line">        <span class="string">`Don't try to handle <span class="subst">$&#123;</span></span></span><br><span class="line"><span class="string"><span class="subst">        ActionTypes.INIT</span></span></span><br><span class="line"><span class="string"><span class="subst">        &#125;</span> or other actions in "redux/*" `</span> +</span><br><span class="line">        <span class="string">`namespace. They are considered private. Instead, you must return the `</span> +</span><br><span class="line">        <span class="string">`current state for any unknown actions, unless it is undefined, `</span> +</span><br><span class="line">        <span class="string">`in which case you must return the initial state, regardless of the `</span> +</span><br><span class="line">        <span class="string">`action type. The initial state may not be undefined, but can be null.`</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 错误信息拼接</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getUndefinedStateErrorMessage</span>(<span class="params">key, action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> actionType = action &amp;&amp; action.type</span><br><span class="line">    <span class="keyword">const</span> actionDescription =</span><br><span class="line">      (actionType &amp;&amp; <span class="string">`action "<span class="subst">$&#123;<span class="built_in">String</span>(actionType)&#125;</span>"`</span>) || <span class="string">'an action'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="string">`Given <span class="subst">$&#123;actionDescription&#125;</span>, reducer "<span class="subst">$&#123;key&#125;</span>" returned undefined. `</span> +</span><br><span class="line">      <span class="string">`To ignore an action, you must explicitly return the previous state. `</span> +</span><br><span class="line">      <span class="string">`If you want this reducer to hold no value, you can return null instead of undefined.`</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getUnexpectedStateShapeWarningMessage</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    inputState,</span></span></span><br><span class="line"><span class="function"><span class="params">    reducers,</span></span></span><br><span class="line"><span class="function"><span class="params">    action,</span></span></span><br><span class="line"><span class="function"><span class="params">    unexpectedKeyCache</span></span></span><br><span class="line"><span class="function"><span class="params">  </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> reducerKeys = <span class="built_in">Object</span>.keys(reducers)</span><br><span class="line">    <span class="keyword">const</span> argumentName =</span><br><span class="line">      action &amp;&amp; action.type === ActionTypes.INIT ?</span><br><span class="line">        <span class="string">'preloadedState argument passed to createStore'</span> :</span><br><span class="line">        <span class="string">'previous state received by the reducer'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (reducerKeys.length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="string">'Store does not have a valid reducer. Make sure the argument passed '</span> +</span><br><span class="line">        <span class="string">'to combineReducers is an object whose values are reducers.'</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!isPlainObject(inputState)) &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="string">`The <span class="subst">$&#123;argumentName&#125;</span> has unexpected type of "`</span> + &#123;&#125;.toString.call(inputState).match(<span class="regexp">/\s([a-z|A-Z]+)/</span>)[<span class="number">1</span>] +</span><br><span class="line">        <span class="string">`". Expected argument to be an object with the following `</span> +</span><br><span class="line">        <span class="string">`keys: "<span class="subst">$&#123;reducerKeys.join(<span class="string">'", "'</span>)&#125;</span>"`</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> unexpectedKeys = <span class="built_in">Object</span>.keys(inputState).filter(</span><br><span class="line">      key =&gt; !reducers.hasOwnProperty(key) &amp;&amp; !unexpectedKeyCache[key]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    unexpectedKeys.forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">      unexpectedKeyCache[key] = <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (action &amp;&amp; action.type === ActionTypes.REPLACE) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (unexpectedKeys.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="string">`Unexpected <span class="subst">$&#123;unexpectedKeys.length &gt; <span class="number">1</span> ? <span class="string">'keys'</span> : <span class="string">'key'</span>&#125;</span> `</span> +</span><br><span class="line">        <span class="string">`"<span class="subst">$&#123;unexpectedKeys.join(<span class="string">'", "'</span>)&#125;</span>" found in <span class="subst">$&#123;argumentName&#125;</span>. `</span> +</span><br><span class="line">        <span class="string">`Expected to find one of the known reducer keys instead: `</span> +</span><br><span class="line">        <span class="string">`"<span class="subst">$&#123;reducerKeys.join(<span class="string">'", "'</span>)&#125;</span>". Unexpected keys will be ignored.`</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> redux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>redux-源码解析(2)-applyMiddleware&amp;compose</title>
      <link href="/2018/08/09/redux-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90(2)-applyMiddleware&amp;compose/"/>
      <url>/2018/08/09/redux-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90(2)-applyMiddleware&amp;compose/</url>
      <content type="html"><![CDATA[<p>讲到redux中间件就涉及好多知识了, 如函数的柯里化、<code>store</code>的强化器<code>enhancer</code>、<code>compose</code>归并方法,这里不讲函数的柯里化.</p><h2 id="enhancer"><a href="#enhancer" class="headerlink" title="enhancer"></a>enhancer</h2><blockquote><p><code>enhancer</code>是一个高阶函数.顾名思义,它用来增加或者修改store的功能, 在<code>createStore</code>中只有短短的几行代码涉及到它.</p></blockquote><p>先来看看它的函数签名,它接收<code>createStore</code>函数,返回一个参数为<code>reducer</code>和<code>preloadedState</code>的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">enhancer</span>(<span class="params">createStore</span>) </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span><span class="function">(<span class="params">reducer, preloadedState</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// 创建一个store</span></span><br><span class="line">   <span class="comment">// 对store进行修改</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// 返回store</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这里,你需要知道它大概的样子就好.</p><p>来个实际的场景,我们需要对每次发送的<code>action</code>进行输出log.在理解<code>enhancer</code>前,你可以会这么处理,在每个<code>reducer</code>中添加代码,对<code>action</code>输出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reducer = <span class="function">(<span class="params">state = <span class="number">0</span>, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(action)</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'increment'</span>:</span><br><span class="line">      <span class="keyword">return</span> state + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'decrement'</span>:</span><br><span class="line">      <span class="keyword">return</span> state - <span class="number">1</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单粗暴的解决方法,但如果<code>reducer</code>有很多个,那么我们需要对所有的<code>reducer</code>添加这段代码,容易遗漏, 当我们不需要这段输出的时候,那么我们又要从多个<code>reducer</code>中删除这段代码,给后期的维护提高了难度.</p><p>这个时候该<code>enhancer</code>出场了,<code>reducer</code>是在<code>dispatch</code>中被调用的,那么我们修改<code>dispatch</code>函数就完美地解决了这个问题,来看看代码.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> enhancer = <span class="function">(<span class="params">createStore</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">reducer, preloadedState</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 使用原createStore创建store</span></span><br><span class="line">    <span class="keyword">const</span> store = createStore(reducer, preloadedState)</span><br><span class="line">    <span class="comment">// 保存原dispatch的引用</span></span><br><span class="line">    <span class="keyword">let</span> dispatch = store.dispatch</span><br><span class="line">    <span class="comment">// 修改store的dispatch方法</span></span><br><span class="line">    store.dispatch = <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(action);</span><br><span class="line">      <span class="comment">// 调用原dispatch方法</span></span><br><span class="line">      dispatch(action)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> store</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>思考:如果继续增加逻辑,计算每次dispatch执行的时间以及输出dispatch执行前的state和dispatch执行后的state.</p></blockquote><p>继续看代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> enhancer = <span class="function">(<span class="params">createStore</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">reducer, preloadedState</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> store = createStore(reducer, preloadedState)</span><br><span class="line">    <span class="keyword">let</span> dispatch = store.dispatch</span><br><span class="line">    store.dispatch = <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(action)</span><br><span class="line">      <span class="built_in">console</span>.log(store.getState())</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>())</span><br><span class="line">      dispatch(action)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>())</span><br><span class="line">      <span class="built_in">console</span>.log(store.getState())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> store</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>还好我们只是增加了一些简单的代码,假设如果是一些很复杂的代码,各种逻辑的代码混杂的一起,后期代码维护工作的难度还是不小的.</p><p>同时思考如果其中部分的代码需要给其他项目复用呢?总不能老是copy代码吧.这时候该中间件出场了</p></blockquote><h2 id="middleware中间件"><a href="#middleware中间件" class="headerlink" title="middleware中间件"></a>middleware中间件</h2><p>每个<code>middleware</code>是个独立的高阶函数. <code>middleware</code>中间件简单的理解就是在<code>dispatch(action)</code>前后添加自己的代码.middleware类似洋葱圈模型. </p><p><img src="/images/Snipaste_2018-08-08_18-08-31.png" alt="Snipaste_2018-08-08_18-08-31"></p><p>通过图可以看出,store.dispatch(经过封装的dispatch)后,代码执行路径是mid1 -&gt; mid2 -&gt; mid3 -&gt; dispatch(原store.dispatch) -&gt; mid3 -&gt; mid2 -&gt; mid1.</p><h2 id="applyMiddleware"><a href="#applyMiddleware" class="headerlink" title="applyMiddleware"></a>applyMiddleware</h2><p><code>applyMiddleware</code>函数的本质是创建一个<code>enhancer</code>,它传入多个中间件函数,在返回的<code>enhancer</code>中一层层地将原store.dispatch嵌套.</p><p>先看看中间件的函数签名,函数签名比较复杂,内部有2层的函数嵌套.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按照层次,依次参数为</span></span><br><span class="line"><span class="comment">// 1. store对象,</span></span><br><span class="line"><span class="comment">// 2.下一个中间件的最内层函数或者是原store.dispatch,</span></span><br><span class="line"><span class="comment">// 3. 上一层中间件返回的action对象,或者是最外层调用store.dispatch函数的参数action</span></span><br><span class="line"><span class="keyword">const</span> middleware = <span class="function"><span class="params">store</span> =&gt;</span> next =&gt; <span class="function"><span class="params">action</span> =&gt;</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来看看上面讲到的三个需求用中间件的实现代码.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在执行dispatch前输出action</span></span><br><span class="line"><span class="keyword">const</span> actionLogMiddleware = <span class="function"><span class="params">store</span> =&gt;</span> next =&gt; <span class="function"><span class="params">action</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(action)</span><br><span class="line">  <span class="keyword">let</span> r = next(action)</span><br><span class="line">  <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在执行dispatch前后输出state</span></span><br><span class="line"><span class="keyword">const</span> stateLogMiddleware = <span class="function"><span class="params">store</span> =&gt;</span> next =&gt; <span class="function"><span class="params">action</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(store.getState())</span><br><span class="line">  <span class="keyword">let</span> r = next(action)</span><br><span class="line">  <span class="built_in">console</span>.log(store.getState())</span><br><span class="line">  <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出dispatch的执行时间</span></span><br><span class="line"><span class="keyword">const</span> timeLogMiddleware = <span class="function"><span class="params">store</span> =&gt;</span> next =&gt; <span class="function"><span class="params">action</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'timeStart'</span>,<span class="keyword">new</span> <span class="built_in">Date</span>())</span><br><span class="line">  <span class="keyword">let</span> r = next(action)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'timeEnd'</span>,<span class="keyword">new</span> <span class="built_in">Date</span>())</span><br><span class="line">  <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> reducer = <span class="function">(<span class="params">state = <span class="number">0</span>, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'exec reducer'</span>)</span><br><span class="line">  <span class="keyword">if</span>(action.type === <span class="string">'add'</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> state + <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> state</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 我刚才说过applyMiddleware函数的本质是创建一个enhancer</span></span><br><span class="line"><span class="keyword">const</span> enhancer = applyMiddleware(actionLogMiddleware, stateLogMiddleware, timeLogMiddleware)</span><br><span class="line"><span class="keyword">let</span> store = createStore(reducer, enhancer)</span><br><span class="line">store.dispatch(&#123; <span class="attr">type</span>: <span class="string">'add'</span> &#125;)</span><br><span class="line"><span class="comment">// 各中间件依次输出</span></span><br><span class="line"><span class="comment">// actionLogMiddleware:    &#123; type: 'add' &#125;</span></span><br><span class="line"><span class="comment">// stateLogMiddleware:     0</span></span><br><span class="line"><span class="comment">// timeLogMiddleware:      timeStart xxxx</span></span><br><span class="line"><span class="comment">// reducer:                exec reducer</span></span><br><span class="line"><span class="comment">// timeLogMiddleware:    timeEnd xxxx</span></span><br><span class="line"><span class="comment">// stateLogMiddleware:    1</span></span><br></pre></td></tr></table></figure><p>来看看<code>applyMiddleware</code>是怎么实现这点的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">applyMiddleware</span>(<span class="params">...middlewares</span>) </span>&#123; <span class="comment">// middlewares = [mid1, mid2, mid3]</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">createStore</span> =&gt;</span> (...args) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 创建原store</span></span><br><span class="line">    <span class="keyword">const</span> store = createStore(...args)</span><br><span class="line">    <span class="comment">// 在Dispatching中添加中间件会报一下错误,但是在store还未创建,dispatch怎么会执行?这点不太明白</span></span><br><span class="line">    <span class="keyword">let</span> dispatch = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">`Dispatching while constructing your middleware is not allowed. `</span> +</span><br><span class="line">        <span class="string">`Other middleware would not be applied to this dispatch.`</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 定义一个类store对象,包含getState函数和上面我们刚定义的dispatch函数</span></span><br><span class="line">    <span class="comment">// 不过在后面dispatch指向又变了,所以在中间件访问到的store.dispatch函数其实是封装过的dispatch</span></span><br><span class="line">    <span class="keyword">const</span> middlewareAPI = &#123;</span><br><span class="line">      getState: store.getState,</span><br><span class="line">      dispatch: <span class="function">(<span class="params">...args</span>) =&gt;</span> dispatch(...args)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 类store对象作为参数,遍历执行所有的中间件</span></span><br><span class="line">    <span class="comment">// chain是以下结构的函数构成的数组</span></span><br><span class="line">    <span class="comment">// func = (next) =&gt; action =&gt; &#123; /*在这里可以访问到类store对象*/ &#125;</span></span><br><span class="line">    <span class="keyword">const</span> chain = middlewares.map(<span class="function"><span class="params">middleware</span> =&gt;</span> middleware(middlewareAPI))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// compose函数是一个归并方法,对chain做了一次归并操作,compose函数的解析请看下一小节</span></span><br><span class="line">    <span class="comment">// 这段代码是对原dispatch的封装</span></span><br><span class="line">    <span class="comment">// 这里可能不太好理解,先跳过,看完compose解析后再回来看这里</span></span><br><span class="line">    dispatch = compose(...chain)(store.dispatch)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 返回原store的拷贝,并将原dispatch函数替换成封装过的dispatch函数</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ...store,</span><br><span class="line">      dispatch</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="compose"><a href="#compose" class="headerlink" title="compose"></a>compose</h2><p>compose是一个归并方法, 作用是将中间件的层层嵌套执行,来看看源码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params">...funcs</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 没有参数时直接返回 arg =&gt; arg </span></span><br><span class="line">  <span class="keyword">if</span> (funcs.length === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">arg</span> =&gt;</span> arg</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 只有一个参数时,直接返回参数</span></span><br><span class="line">  <span class="keyword">if</span> (funcs.length === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> funcs[<span class="number">0</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 对参数归并执行,看下一段代码,了解它的作用</span></span><br><span class="line">  <span class="keyword">return</span> funcs.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> (...args) =&gt; a(b(...args)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> func1 = <span class="function">(<span class="params">a</span>) =&gt;</span> &#123; <span class="comment">/**/</span> &#125;</span><br><span class="line"><span class="keyword">const</span> func2 = <span class="function">(<span class="params">a</span>) =&gt;</span> &#123; <span class="comment">/**/</span> &#125;</span><br><span class="line"><span class="keyword">const</span> func3 = <span class="function">(<span class="params">a</span>) =&gt;</span> &#123; <span class="comment">/**/</span> &#125;</span><br><span class="line"><span class="keyword">const</span> chain = [func1, func2, func3]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> func4 = compose(...chain)</span><br><span class="line"><span class="comment">// 最后hunc4是这个样子</span></span><br><span class="line"><span class="comment">// func4 = (args) =&gt; func1(func2(func3(args)))</span></span><br></pre></td></tr></table></figure><p>到这里,你需要模糊地明白compose做了哪些事情就好了,最后拿一个例子做一次关键代码的执行解析</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mid1 = <span class="function"><span class="params">store1</span> =&gt;</span> next1 =&gt; <span class="function"><span class="params">action1</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">/* do something 1 */</span></span><br><span class="line">  <span class="keyword">let</span> r1 = next1(action1)</span><br><span class="line">  <span class="comment">/* do something1 1 */</span></span><br><span class="line">  <span class="keyword">return</span> r1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mid2 = <span class="function"><span class="params">store2</span> =&gt;</span> next2 =&gt; <span class="function"><span class="params">action2</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">/* do something 2 */</span></span><br><span class="line">  <span class="keyword">let</span> r2 = next2(action2)</span><br><span class="line">  <span class="comment">/* do something 2 */</span></span><br><span class="line">  <span class="keyword">return</span> r2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mid3 = <span class="function"><span class="params">store3</span> =&gt;</span> next3 =&gt; <span class="function"><span class="params">action3</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">/* do something 3 */</span></span><br><span class="line">  <span class="keyword">let</span> r3 = next3(action3)</span><br><span class="line">  <span class="comment">/* do something 3 */</span></span><br><span class="line">  <span class="keyword">return</span> r3</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  执行applyMiddleware(mid1,mid2)</span></span><br><span class="line">applyMiddleware(mid1, mid2, mid3)&#123;</span><br><span class="line">  <span class="keyword">const</span> middlewares = [mid1, mid2, mid3]</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">createStore</span> =&gt;</span> (reducer, preloadedState)) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> store = createStore(reducer, preloadedState)</span><br><span class="line">    <span class="keyword">let</span> dispatch = <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'xxxx'</span>) &#125;</span><br><span class="line">    <span class="comment">// 创建类store对象</span></span><br><span class="line">    <span class="keyword">const</span> middlewareAPI = &#123;</span><br><span class="line">      getState: store.getState,</span><br><span class="line">      dispatch: <span class="function">(<span class="params">...args</span>) =&gt;</span> dispatch(...args)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> chain = middlewares.map(<span class="function"><span class="params">middleware</span> =&gt;</span> middleware(middlewareAPI))</span><br><span class="line">    <span class="comment">// 得到的chain为以下结构,但map遍历执行后都生成了一个闭包,</span></span><br><span class="line">    <span class="comment">// 所以每个函数都可以访问到middlewareAPI对象,</span></span><br><span class="line">    <span class="comment">// 注意此时middlewareAPI.dispatch还是那个抛出错误的箭头函数</span></span><br><span class="line">    chain = [</span><br><span class="line">      next1 =&gt; <span class="function"><span class="params">action1</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">/* do something 1 */</span></span><br><span class="line">        <span class="keyword">let</span> r1 = next1(action1)</span><br><span class="line">        <span class="comment">/* do something 1 */</span></span><br><span class="line">        <span class="keyword">return</span> r1</span><br><span class="line">      &#125;,</span><br><span class="line">      next2 =&gt; <span class="function"><span class="params">action2</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">/* do something 2 */</span></span><br><span class="line">        <span class="keyword">let</span> r2 = next2(action2)</span><br><span class="line">        <span class="comment">/* do something 2 */</span></span><br><span class="line">        <span class="keyword">return</span> r2</span><br><span class="line">      &#125;,</span><br><span class="line">      next3 =&gt; <span class="function"><span class="params">action3</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">/* do something 3 */</span></span><br><span class="line">        <span class="keyword">let</span> r3 = next3(action3)</span><br><span class="line">        <span class="comment">/* do something 3 */</span></span><br><span class="line">        <span class="keyword">return</span> r3</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    dispatch = compose(...chain)(store.dispatch)</span><br><span class="line">    <span class="comment">// compose(...chain)执行结果类似以下结构</span></span><br><span class="line">    <span class="comment">// 注意,每个next函数同样都是通过闭包的形式去访问的,而不是下面代码这样,但整体结构类似</span></span><br><span class="line">    <span class="keyword">let</span> preDispatch = <span class="function">(<span class="params">next3</span>) =&gt;</span> (action1) =&gt; &#123;</span><br><span class="line">      <span class="comment">/* do something 1 */</span></span><br><span class="line">      <span class="keyword">let</span> next1 = <span class="function">(<span class="params">action2</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">/* do something 2 */</span></span><br><span class="line">        <span class="keyword">let</span> next2 = <span class="function">(<span class="params">action3</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">/* do something 3 */</span></span><br><span class="line">          <span class="keyword">let</span> r3 = next3(action3)</span><br><span class="line">          <span class="comment">/* do something 3 */</span></span><br><span class="line">          <span class="keyword">return</span> r3</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> r2 = next2(action2)</span><br><span class="line">        <span class="comment">/* do something 2 */</span></span><br><span class="line">        <span class="keyword">return</span> r2</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">let</span> r1 = next1(action1)</span><br><span class="line">      <span class="comment">/* do something 1 */</span></span><br><span class="line">      <span class="keyword">return</span> r1</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 最后传入原sotre.dispatch执行得到封装过的dispatch函数</span></span><br><span class="line">    <span class="comment">// dispatch = preDispatch(sotre.dispatch)</span></span><br><span class="line">    <span class="comment">// 注意,此时dispatch的指针改变了,上面middlewareAPI.dispatch也就指向了封装过的dispatch</span></span><br><span class="line">    <span class="comment">// 所以每个中间件是可以调用封装过的dispatch函数的</span></span><br><span class="line">    <span class="comment">// 最后得到的dispatch是这样的</span></span><br><span class="line">    dispatch = <span class="function">(<span class="params">action1</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">/* do something 1 */</span></span><br><span class="line">      <span class="keyword">let</span> next1 = <span class="function">(<span class="params">action2</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">/* do something 2 */</span></span><br><span class="line">        <span class="keyword">let</span> next2 = <span class="function">(<span class="params">action3</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">/* do something 3 */</span></span><br><span class="line">          <span class="comment">// 执行原store.dispatch</span></span><br><span class="line">          <span class="keyword">let</span> r3 = store.dispatch(action3)</span><br><span class="line">          <span class="comment">/* do something 3 */</span></span><br><span class="line">          <span class="keyword">return</span> r3</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> r2 = next2(action2)</span><br><span class="line">        <span class="comment">/* do something 2 */</span></span><br><span class="line">        <span class="keyword">return</span> r2</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">let</span> r1 = next1(action1)</span><br><span class="line">      <span class="comment">/* do something 1 */</span></span><br><span class="line">      <span class="keyword">return</span> r1</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回原store的拷贝,并将原dispatch函数替换成封装过的dispatch函数</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ...store,</span><br><span class="line">      dispatch</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到此,applyMiddleware源码解析完成 . 要想更好了解redux,还是推荐自己写一遍简单的用例,一步步调试,输出关键数据才能透彻地了解redux的执行机制.</p>]]></content>
      
      
        <tags>
            
            <tag> redux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>redux-源码解析(1)-createStore</title>
      <link href="/2018/07/25/redux-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90(1)-createStore/"/>
      <url>/2018/07/25/redux-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90(1)-createStore/</url>
      <content type="html"><![CDATA[<h2 id="createStore"><a href="#createStore" class="headerlink" title="createStore"></a>createStore</h2><p>顾名思义,用函数可以创建一个<code>store</code>对象,<code>store</code>负责保存和管理<code>state</code>,利用闭包特性,外部无法直接修改<code>state</code>,只能通过<code>store.getState()</code>来读取<code>state</code>,我们首先看看<code>createStore</code>函数的函数签名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">createStore(reducer, [preloadedState], [enhancer])</span><br></pre></td></tr></table></figure><p>在<code>creatStore</code>函数前几行有一段代码,实现了<code>createStore</code>函数的重载,所以<code>createStore</code>函数还可以这么调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">createStore(reducer, enhancer)&#123;</span><br><span class="line">  <span class="keyword">return</span> store = &#123;</span><br><span class="line">    dispatch,</span><br><span class="line">    subscribe,</span><br><span class="line">    getState,</span><br><span class="line">    replaceReducer</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>createStore</code>返回一个<code>stre</code>对象,我们来看看<code>createStore</code>的内部结构,简单地说明下部分代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">createStore(reducer, preloadedState, enhancer) &#123;</span><br><span class="line">  <span class="comment">// 实现函数重载</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> preloadedState === <span class="string">'function'</span> &amp;&amp; <span class="keyword">typeof</span> enhancer === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    enhancer = preloadedState</span><br><span class="line">    preloadedState = <span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// 校验enhancer,对store进行增强,本篇文章暂时不做分析</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> enhancer !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> enhancer !== <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Expected the enhancer to be a function.'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> enhancer(createStore)(reducer, preloadedState)</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// 校验reducer,reducer必须是个纯函数,reducer后面会有单独说明</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> reducer !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Expected the reducer to be a function.'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// 保存相关数据</span></span><br><span class="line">  <span class="keyword">let</span> currentReducer = reducer</span><br><span class="line">  <span class="keyword">let</span> currentState = preloadedState</span><br><span class="line">  <span class="keyword">let</span> currentListeners = []</span><br><span class="line">  <span class="keyword">let</span> nextListeners = currentListeners</span><br><span class="line">  <span class="keyword">let</span> isDispatching = <span class="literal">false</span> <span class="comment">// reducer是否执行中</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 若nextListeners和currentListeners全等,给nextListeners赋值currentListeners的浅拷贝</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">ensureCanMutateNextListeners</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nextListeners === currentListeners) &#123;</span><br><span class="line">      nextListeners = currentListeners.slice()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">  <span class="comment">// 读取store的state.</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getState</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 注意!!!在reducer执行过程中无法使用该函数去读取state</span></span><br><span class="line">    <span class="keyword">if</span> (isDispatching) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">'在reducer执行中不能通过getState读取state,'</span>+</span><br><span class="line">        <span class="string">'从reducer中的state参数中读取,而不是通过getState'</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> currentState</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 添加订阅者,参数是个函数.注意!!在reducer执行过程中无法调用该函数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">subscribe</span>(<span class="params">listener</span>) </span>&#123;<span class="comment">/*后面会详细说明*/</span>&#125;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// 发送atcion</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params">action</span>) </span>&#123;<span class="comment">/*后面会详细说明*/</span>&#125;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// 替换reducer</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">replaceReducer</span>(<span class="params">nextReducer</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 校验参数类型,必须为函数</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> nextReducer !== <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Expected the nextReducer to be a function.'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    currentReducer = nextReducer</span><br><span class="line">    <span class="comment">// 替换完成后,发送REPLACE的action</span></span><br><span class="line">    dispatch(&#123; <span class="attr">type</span>: ActionTypes.REPLACE &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// 创建store的最后一步</span></span><br><span class="line">  <span class="comment">// 发送INIT的action</span></span><br><span class="line">  <span class="comment">// 在reducer中不该对type为ActionTypes.INIT的action经行精确命中</span></span><br><span class="line">  dispatch(&#123; <span class="attr">type</span>: ActionTypes.INIT &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    dispatch,</span><br><span class="line">    subscribe,</span><br><span class="line">    getState,</span><br><span class="line">    replaceReducer</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="reducer"><a href="#reducer" class="headerlink" title="reducer"></a>reducer</h2><p><code>reducer</code>是一个纯函数,它是唯一能修改<code>store</code>状态的途径,当<code>store</code>发送一个<code>action</code>时<code>reducer</code>会在<code>store</code>内部被执行,它的函数签名是</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// state: 当前store的state</span></span><br><span class="line"><span class="comment">// action: 外部代码执行store.dispatch传入的action</span></span><br><span class="line">reducer(state, action)&#123;</span><br><span class="line">    <span class="comment">/* 通过对action.type的判断,执行相应代码,返回一个新的state */</span></span><br><span class="line">    <span class="comment">/* reducer是一个纯函数,所以不要对state进行修改 */</span></span><br><span class="line">    <span class="keyword">return</span> newState</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> <code>reducer</code>内部怎么写都行,只要是个纯函数,返回一个新的<code>state</code>就可以,这里建议引入<code>immutable</code></p></blockquote><p>我们来看一个简单的reducer例子, 对state进行加减</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;__DO_NOT_USE__ActionTypes <span class="keyword">as</span> ActionTypes&#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reducer = <span class="function">(<span class="params">state = <span class="number">0</span>, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'increment'</span>:</span><br><span class="line">      <span class="keyword">return</span> state + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'decrement'</span>:</span><br><span class="line">      <span class="keyword">return</span> state - <span class="number">1</span></span><br><span class="line">    <span class="keyword">case</span> ActionTypes.INIT: </span><br><span class="line">    <span class="comment">// 注意!!!!</span></span><br><span class="line">    <span class="comment">// 该case是个错误的示例,不能直接命中 ActionTypes.INIT</span></span><br><span class="line">    <span class="comment">// 从redux的命名可以看,不应在redux的外部使用该值</span></span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="subscribe"><a href="#subscribe" class="headerlink" title="subscribe"></a>subscribe</h2><p><code>subscribe</code>用来添加订阅,当<code>store</code>发送一个<code>action</code>时,被订阅的函数就会执行.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">subscribe</span>(<span class="params">listener</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 参数校验</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> listener !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Expected the listener to be a function.'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// reducer执行中无法添加订阅</span></span><br><span class="line">  <span class="keyword">if</span> (isDispatching) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">      <span class="string">'reducer执行中无法添加订阅'</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 是否已订阅的标识</span></span><br><span class="line">  <span class="keyword">let</span> isSubscribed = <span class="literal">true</span></span><br><span class="line">  ensureCanMutateNextListeners()</span><br><span class="line">  <span class="comment">// 在订阅队列中push一个listener</span></span><br><span class="line">  nextListeners.push(listener)</span><br><span class="line">  <span class="comment">// 返回该次订阅的取消订阅函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">unsubscribe</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 执行过取消订阅的函数后,再次调用,后面的代码就不需要执行</span></span><br><span class="line">    <span class="keyword">if</span> (!isSubscribed) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// reducer执行中无法取消订阅</span></span><br><span class="line">    <span class="keyword">if</span> (isDispatching) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">'reducer执行中无法取消订阅'</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 标记取消订阅</span></span><br><span class="line">    isSubscribed = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    ensureCanMutateNextListeners()</span><br><span class="line">    <span class="comment">// 从订阅队列中删除订阅的事件</span></span><br><span class="line">    <span class="keyword">const</span> index = nextListeners.indexOf(listener)</span><br><span class="line">    nextListeners.splice(index, <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在发送action后,reducer执行完毕,会依次按添加订阅的<strong>顺序</strong>执行<code>listeners</code></p></blockquote><h2 id="dispatch"><a href="#dispatch" class="headerlink" title="dispatch"></a>dispatch</h2><p><code>dispatch</code>用来发送action,在<code>dispatch</code>内部执行<code>reducer</code>,执行返回的结果就是store的最新<code>state</code>, 然后<strong>按顺序</strong>执行<code>listeners</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params">action</span>) </span>&#123;</span><br><span class="line">   <span class="comment">// action格式的校验</span></span><br><span class="line">   <span class="keyword">if</span> (!isPlainObject(action)) &#123;</span><br><span class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'action的格式必须是简单的对象,用中间件处理异步的action'</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">typeof</span> action.type === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'action必须要有type属性'</span>)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (isDispatching) &#123;</span><br><span class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'有reducer未执行完毕,无法发送action'</span>)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">     isDispatching = <span class="literal">true</span></span><br><span class="line">     <span class="comment">// 执行reducer,执行完毕后赋值赋值给state,更新状态</span></span><br><span class="line">     currentState = currentReducer(currentState, action)</span><br><span class="line">     <span class="comment">// 还记得前面reducer的例子吗,回头看看,currentReducer就是那个函数</span></span><br><span class="line">   &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">     isDispatching = <span class="literal">false</span></span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">const</span> listeners = (currentListeners = nextListeners)</span><br><span class="line">   <span class="comment">// 循环执行订阅的事件</span></span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; listeners.length; i++) &#123;</span><br><span class="line">     <span class="keyword">const</span> listener = listeners[i]</span><br><span class="line">     listener()</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 最后返回action</span></span><br><span class="line">   <span class="keyword">return</span> action</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>光从<code>redux</code>的<code>creatStore</code>函数的代码可以看出整个<code>redux</code>的基本运行机制类似发布订阅模式, <code>reducer</code>就是订阅的所有事件,  <code>actio.type</code>是事件的类型, <code>dispatch</code>一个<code>action</code>就是广播一个事件.区别在于<code>redux</code>无法直接添加事件.但可以通过<code>replaceReducer</code>函数替换<code>reducer</code>. </p>]]></content>
      
      
        <tags>
            
            <tag> redux </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
